##

export JAVA_OPTS="-Dinfo.aduna.platform.appdata.basedir={{sesame.data_dir}}"

############################################
#
# JAVA_OPTS
#  You could do all this in one export command
# But I am going to be long winded and explain
# Why and add links
#
# Oracle Notes
#  - https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html
#  - A good visual
#  https://redstack.wordpress.com/2011/01/06/visualising-garbage-collection-in-the-jvm/
#############################################


# -server
#  Select the java HotSpot Server JVM
# The 64-bit version of the JDK support only the Server VM,
# so in that case the option is implicit
# ... so it's redundant to today's world but it make me feel good.
export JAVA_OPTS="$JAVA_OPTS -server"

# -Xms/Xmx
#   Xms Sets the initial size of the Heap
#   Xmx sets the Maximum size of the Heap.
#  http://stackoverflow.com/questions/16087153/what-happens-when-we-set-xmx-and-xms-equal-size
#  http://crunchify.com/jvm-tuning-heapsize-stacksize-garbage-collection-fundamental/
export JAVA_OPTS="$JAVA_OPTS -Xms{{java.xms}} -Xmx{{java.xmx}}"

# -NewSize/MaxNewSize
#  Set the size of the young generation
#  Most newly created objects are made here
#  Objects taht did not become unreachbale and survice the young
# Generation heap are copied to the Old Generation
# See http://www.cubrid.org/blog/dev-platform/understanding-java-garbage-collection
# https://redstack.wordpress.com/2011/01/06/visualising-garbage-collection-in-the-jvm/
export JAVA_OPTS="$JAVA_OPTS -XX:NewSize={{java.xnss}} -XX:MaxNewSize={{java.xnsx}}"

# -PermSize/MaxPermSize
#  Store classes and interned character strings
# http://stackoverflow.com/questions/12114174/what-does-xxmaxpermsize-do
#   Warning!
#  Decprecated in Java 8!!  replace -XX:MetaspaceSize  !!!
#export JAVA_OPTS="$JAVA_OPTS -XX:MetaspaceSize={{java.xmss}}"

# -UseConcMarkSweepGC
#  Also called the low latency GC since pausing time is very short
# When this is enabled it also enabled
#   -XX:+UseParNewGC Potentially speed up your generation GC
#   by a factor equal to the number of CPUS
#   (see http://stackoverflow.com/questions/2101518/difference-between-xxuseparallelgc-and-xxuseparnewgc)
#  http://www.cubrid.org/blog/dev-platform/understanding-java-garbage-collection/
#export JAVA_OPTS="$JAVA_OPTS -XX:+UseConcMarkSweepGC"


# -CMSClassUnloadingEnabled
#   In an old school java program classes are forever.  But with
# Modern languages like Groovy... Classes are created at runtime, every
# scirpt may create a few new classes.  With this set the PermGen space will
# Be garbage collecte3d.  Without this you have a memory Leak.
#
#  Must also have UseConcMarkSweepGC set for this to work.
#
#  http://stackoverflow.com/questions/3334911/what-does-jvm-flag-cmsclassunloadingenabled-actually-do
#export JAVA_OPTS="$JAVA_OPTS -XX:+CMSClassUnloadingEnabled"


# -DisableExlicitGC
#  Explicit calls to System.gc() are completely ignored
#
# http://stackoverflow.com/questions/12847151/setting-xxdisableexplicitgc-in-production-what-could-go-wrong
export JAVA_OPTS="$JAVA_OPTS -XX:+DisableExplicitGC"

# -HeapDumpPath
#   Set the file where the heap dump will write out its error
# export JAVA_OPTS="$JAVA_OPTS -XX:HeapDumpPath=/10x13/logs/tomcat8/java_heapdump_pid_%p.log"

# -java.awt.headless
#  Basically tell the JVM not to load awt libraries
#  Your server is not a desktop app, there is more to this rule than that.
#  If you want to go into it check out.
#  https://blog.idrsolutions.com/2013/08/what-is-headless-mode-in-java/
#  http://www.oracle.com/technetwork/articles/javase/headless-136834.html
export JAVA_OPTS="$JAVA_OPTS -Djava.awt.headless=true"


# -java.security.egd
#  This one is abit of a debate
# If you don't set this it will use /dev/random on startup
# which can block and make tomcat startup slower.
# But it's technically more secure... but no one has shown
# a way to break the results of urandom which is faster.
#  For more details see.
#   http://www.2uo.de/myths-about-urandom/
export JAVA_OPTS="$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom"

